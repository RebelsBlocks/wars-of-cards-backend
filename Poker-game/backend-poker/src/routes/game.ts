import { Router } from 'express';
import { GameState } from '../types/game';
import { GameService } from '../services/GameService';

export function createGameRouter(gameService: GameService) {
  const router = Router();

  // Health check endpoint for Railway
  router.get('/health', (req, res) => {
    res.status(200).json({ status: 'ok', timestamp: new Date().toISOString() });
  });

  // Utworzenie nowej gry
  router.post('/games', (req, res) => {
    try {
      console.log('Creating new game...');
      const game = gameService.createGame();
      console.log('Game created successfully:', game.id);
      res.status(201).json(game);
    } catch (error) {
      console.error('Error creating game:', error);
      res.status(500).json({ error: 'Nie uda≈Ço siƒô utworzyƒá gry' });
    }
  });

  // Znajd≈∫ dostƒôpnƒÖ grƒô z wolnymi miejscami
  router.get('/games/available', (req, res) => {
    try {
      console.log('Looking for available game...');
      const availableGame = gameService.findAvailableGame();
      if (availableGame) {
        console.log('Found available game:', availableGame.id);
        res.status(200).json(availableGame);
      } else {
        console.log('No available games found');
        res.status(404).json({ error: 'Brak dostƒôpnych gier' });
      }
    } catch (error) {
      console.error('Error finding available game:', error);
      res.status(500).json({ error: 'Nie uda≈Ço siƒô znale≈∫ƒá dostƒôpnej gry' });
    }
  });

  // Atomowy endpoint: znajd≈∫/utw√≥rz grƒô i od razu do≈ÇƒÖcz
  router.post('/games/join-or-create', (req, res) => {
    try {
      const { seatNumber, initialBalance } = req.body;
      const MAIN_TABLE_ID = 'main-blackjack-table'; // ‚úÖ STA≈ÅY ID
      
      console.log('Join-or-create request received:', { 
        seatNumber, 
        initialBalance,
        body: req.body 
      });
      
      if (!seatNumber || seatNumber < 1 || seatNumber > 3) {
        console.error('Invalid seat number:', seatNumber);
        return res.status(400).json({ error: 'Nieprawid≈Çowy numer miejsca (1-3)' });
      }
      
      // 1. Sprawd≈∫ czy g≈Ç√≥wny st√≥≈Ç istnieje  
      let game = gameService.getGameState(MAIN_TABLE_ID);
      
      // 2. Je≈õli nie - stw√≥rz z konkretnym ID
      if (!game) {
        console.log('Creating main blackjack table...');
        game = gameService.createGame(MAIN_TABLE_ID); // ‚úÖ Przeka≈º sta≈Çy ID
      } else {
        console.log('Found existing main table:', game.id);
      }
      
      // 3. Od razu do≈ÇƒÖcz gracza (atomowo)
      const player = gameService.joinGame(game.id, seatNumber, initialBalance);
      
      console.log('Player joined successfully:', player.id, 'to game:', game.id);
      res.status(200).json({ 
        game: gameService.cleanGameStateForClient(game),
        player: player 
      });
    } catch (error) {
      console.error('Join-or-create error:', error);
      if (error instanceof Error) {
        res.status(400).json({ error: error.message });
      } else {
        res.status(500).json({ error: 'Nie uda≈Ço siƒô do≈ÇƒÖczyƒá do gry' });
      }
    }
  });

  // Do≈ÇƒÖczenie do gry
  router.post('/games/:gameId/join', (req, res) => {
    try {
      const { gameId } = req.params;
      const { seatNumber, initialBalance } = req.body;
      
      console.log('Join request received:', { 
        gameId, 
        seatNumber, 
        initialBalance,
        body: req.body 
      });
      
      if (!seatNumber || seatNumber < 1 || seatNumber > 3) {
        console.error('Invalid seat number:', seatNumber);
        return res.status(400).json({ error: 'Nieprawid≈Çowy numer miejsca (1-3)' });
      }
      
      const player = gameService.joinGame(gameId, seatNumber, initialBalance);
      console.log('Player joined successfully:', player.id);
      res.status(200).json(player);
    } catch (error) {
      console.error('Join error:', error);
      if (error instanceof Error) {
        res.status(400).json({ error: error.message });
      } else {
        res.status(500).json({ error: 'Nie uda≈Ço siƒô do≈ÇƒÖczyƒá do gry' });
      }
    }
  });

  // Rozpoczƒôcie nowej rundy
  router.post('/games/:gameId/start', (req, res) => {
    try {
      const { gameId } = req.params;
      const game = gameService.startRound(gameId);
      res.status(200).json(game);
    } catch (error) {
      if (error instanceof Error) {
        res.status(400).json({ error: error.message });
      } else {
        res.status(500).json({ error: 'Nie uda≈Ço siƒô rozpoczƒÖƒá rundy' });
      }
    }
  });

  // Postawienie zak≈Çadu
  router.post('/games/:gameId/bet', (req, res) => {
    try {
      const { gameId } = req.params;
      const { playerId, amount } = req.body;
      
      console.log('üí∞ Received bet request:', {
        gameId,
        playerId,
        amount,
        body: req.body
      });

      if (!playerId) {
        console.error('‚ùå Missing playerId in bet request');
        return res.status(400).json({ error: 'Brak ID gracza' });
      }

      if (!amount || amount <= 0) {
        console.error('‚ùå Invalid bet amount:', amount);
        return res.status(400).json({ error: 'Nieprawid≈Çowa kwota zak≈Çadu' });
      }

      // üö´ LEGACY: placeBet - nie u≈ºywane w pokerze
      return res.status(400).json({ error: 'Betting phase not used in poker' });
    } catch (error) {
      console.error('‚ùå Error in bet endpoint:', error);
      res.status(500).json({ error: 'Internal server error' });
    }
  });

  // üÜï POKER ACTION ROUTES

  // Fold hand
  router.post('/games/:gameId/fold', (req, res) => {
    try {
      const { gameId } = req.params;
      const { playerId } = req.body;
      
      console.log('üÉè Received fold request:', { gameId, playerId });
      
      if (!playerId) {
        return res.status(400).json({ error: 'Brak ID gracza' });
      }
      
      const result = gameService.processFold(gameId, playerId);
      res.status(200).json(result);
    } catch (error) {
      console.error('‚ùå Error folding:', error);
      if (error instanceof Error) {
        res.status(400).json({ error: error.message });
      } else {
        res.status(500).json({ error: 'Nie uda≈Ço siƒô spasowaƒá' });
      }
    }
  });

  // Check (pass when no bet required)
  router.post('/games/:gameId/check', (req, res) => {
    try {
      const { gameId } = req.params;
      const { playerId } = req.body;
      
      console.log('‚úÖ Received check request:', { gameId, playerId });
      
      if (!playerId) {
        return res.status(400).json({ error: 'Brak ID gracza' });
      }
      
      const result = gameService.processCheck(gameId, playerId);
      res.status(200).json(result);
    } catch (error) {
      console.error('‚ùå Error checking:', error);
      if (error instanceof Error) {
        res.status(400).json({ error: error.message });
      } else {
        res.status(500).json({ error: 'Nie uda≈Ço siƒô sprawdziƒá' });
      }
    }
  });

  // Call (match current bet)
  router.post('/games/:gameId/call', (req, res) => {
    try {
      const { gameId } = req.params;
      const { playerId } = req.body;
      
      console.log('üìû Received call request:', { gameId, playerId });
      
      if (!playerId) {
        return res.status(400).json({ error: 'Brak ID gracza' });
      }
      
      const result = gameService.processCall(gameId, playerId);
      res.status(200).json(result);
    } catch (error) {
      console.error('‚ùå Error calling:', error);
      if (error instanceof Error) {
        res.status(400).json({ error: error.message });
      } else {
        res.status(500).json({ error: 'Nie uda≈Ço siƒô dor√≥wnaƒá' });
      }
    }
  });

  // Raise (increase bet by amount)
  router.post('/games/:gameId/raise', (req, res) => {
    try {
      const { gameId } = req.params;
      const { playerId, amount } = req.body;
      
      console.log('üìà Received raise request:', { gameId, playerId, amount });
      
      if (!playerId) {
        return res.status(400).json({ error: 'Brak ID gracza' });
      }
      
      if (!amount || amount <= 0) {
        return res.status(400).json({ error: 'Nieprawid≈Çowa kwota podniesienia' });
      }
      
      const result = gameService.processRaise(gameId, playerId, amount);
      res.status(200).json(result);
    } catch (error) {
      console.error('‚ùå Error raising:', error);
      if (error instanceof Error) {
        res.status(400).json({ error: error.message });
      } else {
        res.status(500).json({ error: 'Nie uda≈Ço siƒô podnie≈õƒá stawki' });
      }
    }
  });

  // üö´ LEGACY: Wykonanie ruchu (hit, stand, double, split) - nie u≈ºywane w pokerze
  /*
  router.post('/games/:gameId/move', (req, res) => {
    try {
      const { gameId } = req.params;
      const { playerId, move } = req.body;
      
      let game;
      switch (move) {
        case 'CHECK':
          game = gameService.processCheck(gameId, playerId);
          break;
        case 'CALL':
          game = gameService.processCall(gameId, playerId);
          break;
        case 'FOLD':
          game = gameService.processFold(gameId, playerId);
          break;
        case 'RAISE':
          const raiseAmount = req.body.amount;
          if (!raiseAmount || raiseAmount <= 0) {
            return res.status(400).json({ error: 'Nieprawid≈Çowa kwota podbicia' });
          }
          game = gameService.processRaise(gameId, playerId, raiseAmount);
          break;
        default:
          return res.status(400).json({ error: 'Nieprawid≈Çowy ruch' });
      }
      
      res.status(200).json(game);
    } catch (error) {
      if (error instanceof Error) {
        res.status(400).json({ error: error.message });
      } else {
        res.status(500).json({ error: 'Nie uda≈Ço siƒô wykonaƒá ruchu' });
      }
    }
  });
  */

  // Nowy endpoint do opuszczenia gry
  router.post('/games/:gameId/leave', (req, res) => {
    try {
      const { gameId } = req.params;
      const { playerId } = req.body;
      
      gameService.leaveGame(gameId, playerId);
      res.status(200).json({ success: true });
    } catch (error) {
      if (error instanceof Error) {
        res.status(400).json({ error: error.message });
      } else {
        res.status(500).json({ error: 'Nie uda≈Ço siƒô opu≈õciƒá gry' });
      }
    }
  });

  // Pobranie stanu gry (z automatycznym tworzeniem je≈õli nie istnieje)
  router.get('/games/:gameId', (req, res) => {
    try {
      const { gameId } = req.params;
      let game = gameService.getGameState(gameId);
      
      // Je≈õli gra nie istnieje i to g≈Ç√≥wny st√≥≈Ç - utw√≥rz jƒÖ
      if (!game && gameId === 'main-blackjack-table') {
        console.log('Creating main blackjack table on demand...');
        game = gameService.createGame(gameId);
      } else if (!game) {
        return res.status(404).json({ error: 'Gra nie zosta≈Ça znaleziona' });
      }
      
      res.status(200).json(game);
    } catch (error) {
      res.status(500).json({ error: 'Nie uda≈Ço siƒô pobraƒá stanu gry' });
    }
  });

  return router;
}
